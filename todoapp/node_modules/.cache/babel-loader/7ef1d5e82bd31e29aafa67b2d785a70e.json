{"ast":null,"code":"var _jsxFileName = \"/home/manasi/project/Get_training/todoapp/src/components/TodoApp.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport \"./TodoApp.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction TodoApp() {\n  _s();\n\n  const [task, setTask] = useState(\"\");\n  const [tasklist, setTaskList] = useState([]);\n\n  const handleChange = e => {\n    setTask(e.target.value);\n  };\n\n  const AddTask = () => {\n    if (task !== \"\") {\n      const taskDetails = {\n        id: Math.floor(Math.random() * 1000),\n        value: task,\n        isCompleted: false\n      };\n      setTaskList([...tasklist, taskDetails]);\n    }\n  };\n\n  const deletetask = (e, id) => {\n    e.preventDefault();\n    setTaskList(tasklist.filter(t => t.id !== id));\n  };\n\n  const handleCheckboxChange = id => {\n    const newTodoList = [...tasklist].map(task => {\n      if (task.id === id) return { ...task,\n        isCompleted: !task.isCompleted\n      };\n      return task;\n    });\n    setTaskList(newTodoList);\n  };\n\n  const handleFilter = () => {\n    setTaskList(tasklist);\n    let filtered = tasklist.filter(task => {\n      return !task.isCompleted;\n    });\n    setTaskList(filtered);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"todo\",\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"pending-btn\",\n      onClick: handleFilter,\n      children: \"Pending Task\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 6\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      name: \"text\",\n      id: \"text\",\n      maxLength: \"35\",\n      onChange: e => handleChange(e),\n      placeholder: \"Add task here...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 3\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"add-btn\",\n      onClick: AddTask,\n      children: \"+\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 3\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 3\n    }, this), tasklist !== [] ? /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: tasklist.map(t => /*#__PURE__*/_jsxDEV(\"li\", {\n        className: t.isCompleted ? \"crossText\" : \"listitem\",\n        children: [window.localStorage.setItem(t, '#content'), /*#__PURE__*/_jsxDEV(\"input\", {\n          classname: \"check\",\n          type: \"checkbox\",\n          id: \"isCompleted\",\n          style: {\n            margin: \"0 10px\"\n          },\n          checked: t.isCompleted,\n          onChange: () => handleCheckboxChange(t.id)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 69,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          id: \"content\",\n          contentEditable: \"true\",\n          style: {\n            width: '100%'\n          },\n          children: t.value\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 75,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"delete\",\n          onClick: e => deletetask(e, t.id),\n          children: \"X\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 76,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 9\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 5\n    }, this) : null]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 48,\n    columnNumber: 3\n  }, this);\n}\n\n_s(TodoApp, \"AEA8V6nRm/ZkndsJpoYzs0i0yzE=\");\n\n_c = TodoApp;\nexport default TodoApp;\n\nvar _c;\n\n$RefreshReg$(_c, \"TodoApp\");","map":{"version":3,"sources":["/home/manasi/project/Get_training/todoapp/src/components/TodoApp.js"],"names":["React","useState","TodoApp","task","setTask","tasklist","setTaskList","handleChange","e","target","value","AddTask","taskDetails","id","Math","floor","random","isCompleted","deletetask","preventDefault","filter","t","handleCheckboxChange","newTodoList","map","handleFilter","filtered","window","localStorage","setItem","margin","width"],"mappings":"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","sourcesContent":["\nimport React, { useState } from \"react\";\nimport \"./TodoApp.css\";\n\nfunction TodoApp() {\n  const [task, setTask] = useState(\"\");\n  const [tasklist, setTaskList] = useState([]);\n  const handleChange = (e) => {\n    setTask(e.target.value);\n  };\n\n  const AddTask = () => {\n    if (task !== \"\") {\n      const taskDetails = {\n        id: Math.floor(Math.random() * 1000),\n        value: task,\n        isCompleted: false,\n      };\n      setTaskList([...tasklist, taskDetails]);\n    }\n  };\n\n  const deletetask = (e, id) => {\n    e.preventDefault();\n    setTaskList(tasklist.filter((t) => t.id !== id));\n  };\n\n  const handleCheckboxChange=(id)=>{\n    const newTodoList=[...tasklist].map(task=>{\n        if(task.id===id)\n          return {...task,isCompleted:!task.isCompleted}\n      return task;\n      })\n      setTaskList(newTodoList)\n\n  }\n\n  const handleFilter = () => {\n    setTaskList(tasklist)\n  let filtered = tasklist.filter(task => {\n    return !task.isCompleted;\n  });\n  setTaskList(filtered);\n}\n\n\nreturn (\n  <div className=\"todo\">\n     <button className=\"pending-btn\" onClick={handleFilter}>Pending Task</button>\n  <input\n    type=\"text\"\n    name=\"text\"\n    id=\"text\"\n    maxLength=\"35\"\n    onChange={(e) => handleChange(e)}\n    placeholder=\"Add task here...\"\n  />\n  <button className=\"add-btn\" onClick={AddTask}>\n    +\n  </button>\n \n  <br />\n  {tasklist !== [] ? (\n    <ul>\n      {tasklist.map((t) => (  \n       \n        <li className={t.isCompleted ? \"crossText\" : \"listitem\"}>\n          {window.localStorage.setItem(t,'#content')}\n          <input classname =\"check\" type=\"checkbox\"\n           id=\"isCompleted\"\n           style={{margin:\"0 10px\"}}\n           checked={t.isCompleted}\n           onChange={()=>handleCheckboxChange(t.id)}/>\n           \n          <span id=\"content\" contentEditable=\"true\" style={{width: '100%'}}>{t.value}</span> \n          <button className=\"delete\" onClick={(e) => deletetask(e, t.id)}>\n           X\n          </button>\n        </li>\n      ))}\n    </ul>\n  ) : null}\n</div>\n );\n}\nexport default TodoApp;"]},"metadata":{},"sourceType":"module"}