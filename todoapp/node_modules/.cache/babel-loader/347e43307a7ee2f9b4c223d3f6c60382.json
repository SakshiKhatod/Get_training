{"ast":null,"code":"var _jsxFileName = \"/home/manasi/project/Get_training/todoapp/src/components/TodoApp.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport \"./TodoApp.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction TodoApp() {\n  _s();\n\n  const [task, setTask] = useState(\"\");\n  const [tasklist, setTaskList] = useState([]); // const [todoEditing, setTodoEditing] = React.useState(null);\n  // const [editingText, setEditingText] = React.useState(\"\");\n\n  const handleChange = e => {\n    setTask(e.target.value);\n  };\n\n  const AddTask = () => {\n    if (task !== \"\") {\n      const taskDetails = {\n        id: Math.floor(Math.random() * 1000),\n        value: task,\n        isCompleted: false\n      };\n      setTaskList([...tasklist, taskDetails]);\n    }\n  };\n\n  const deletetask = (e, id) => {\n    e.preventDefault();\n    setTaskList(tasklist.filter(t => t.id !== id));\n  };\n\n  const taskCompleted = (e, id) => {\n    e.preventDefault();\n    const element = tasklist.findIndex(elem => elem.id === id);\n    const newTaskList = [...tasklist];\n    newTaskList[element] = { ...newTaskList[element],\n      isCompleted: true\n    };\n    setTaskList(newTaskList);\n  }; // const handleCheck=(id)=>\n  // {\n  //   if(task.isCompleted)\n  //   return  <span style={{textDecoration:\"line-through\"}}>{task.value}</span> ;\n  //   hanldeCheckboxChange(id)\n  // }\n  // const hanldeCheckboxChange=(id)=>{\n  //   const newTodoList=tasklist.map(task=>{\n  //       if(task.id===id)\n  //         return {...tasklist,isCompleted:!task.isCompleted}\n  //     return task;\n  //     })\n  //     setTaskList(newTodoList)\n  // }\n\n\n  const handleFilter = () => {\n    let filtered = tasklist.filter(task => {\n      return !task.isCompleted;\n    });\n    setTaskList(filtered);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"todo\",\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      name: \"text\",\n      id: \"text\",\n      onChange: e => handleChange(e),\n      placeholder: \"Add task here...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 3\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"add-btn\",\n      onClick: AddTask,\n      children: \"Add\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 3\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"pending-btn\",\n      onClick: handleFilter,\n      children: \"Pending Task\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 3\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 3\n    }, this), tasklist !== [] ? /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: tasklist.map(t => /*#__PURE__*/_jsxDEV(\"li\", {\n        contentEditable: \"true\",\n        className: t.isCompleted ? \"crossText\" : \"listitem\",\n        children: [t.value, /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"completed\",\n          onClick: e => taskCompleted(e, t.id),\n          children: \"Completed\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 86,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"delete\",\n          onClick: e => deletetask(e, t.id),\n          children: \"Delete\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 93,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 9\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 5\n    }, this) : null]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 68,\n    columnNumber: 3\n  }, this);\n}\n\n_s(TodoApp, \"AEA8V6nRm/ZkndsJpoYzs0i0yzE=\");\n\n_c = TodoApp;\nexport default TodoApp;\n\nvar _c;\n\n$RefreshReg$(_c, \"TodoApp\");","map":{"version":3,"sources":["/home/manasi/project/Get_training/todoapp/src/components/TodoApp.js"],"names":["React","useState","TodoApp","task","setTask","tasklist","setTaskList","handleChange","e","target","value","AddTask","taskDetails","id","Math","floor","random","isCompleted","deletetask","preventDefault","filter","t","taskCompleted","element","findIndex","elem","newTaskList","handleFilter","filtered","map"],"mappings":"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","sourcesContent":["\nimport React, { useState } from \"react\";\nimport \"./TodoApp.css\";\n\nfunction TodoApp() {\n  const [task, setTask] = useState(\"\");\n  const [tasklist, setTaskList] = useState([]);\n  // const [todoEditing, setTodoEditing] = React.useState(null);\n  // const [editingText, setEditingText] = React.useState(\"\");\n\n\n  const handleChange = (e) => {\n    setTask(e.target.value);\n  };\n\n  const AddTask = () => {\n    if (task !== \"\") {\n      const taskDetails = {\n        id: Math.floor(Math.random() * 1000),\n        value: task,\n        isCompleted: false,\n      };\n      setTaskList([...tasklist, taskDetails]);\n    }\n  };\n\n  const deletetask = (e, id) => {\n    e.preventDefault();\n    setTaskList(tasklist.filter((t) => t.id !== id));\n  };\n\n  const taskCompleted = (e, id) => {\n    e.preventDefault();\n    const element = tasklist.findIndex((elem) => elem.id === id);\n    const newTaskList = [...tasklist];\n    newTaskList[element] = {\n      ...newTaskList[element],\n      isCompleted: true,\n    }; \n    setTaskList(newTaskList);\n  };\n\n  // const handleCheck=(id)=>\n  // {\n  //   if(task.isCompleted)\n  //   return  <span style={{textDecoration:\"line-through\"}}>{task.value}</span> ;\n  //   hanldeCheckboxChange(id)\n  // }\n  // const hanldeCheckboxChange=(id)=>{\n  //   const newTodoList=tasklist.map(task=>{\n  //       if(task.id===id)\n  //         return {...tasklist,isCompleted:!task.isCompleted}\n  //     return task;\n  //     })\n  //     setTaskList(newTodoList)\n\n  // }\n\nconst handleFilter = () => {\n  let filtered = tasklist.filter(task => {\n    return !task.isCompleted;\n  });\n  setTaskList(filtered);\n}\n\n\nreturn (\n  <div className=\"todo\">\n  <input\n    type=\"text\"\n    name=\"text\"\n    id=\"text\"\n    onChange={(e) => handleChange(e)}\n    placeholder=\"Add task here...\"\n  />\n  <button className=\"add-btn\" onClick={AddTask}>\n    Add\n  </button>\n  <button className=\"pending-btn\" onClick={handleFilter}>Pending Task</button>\n  <br />\n  {tasklist !== [] ? (\n    <ul>\n      {tasklist.map((t) => (\n        <li contentEditable=\"true\" className={t.isCompleted ? \"crossText\" : \"listitem\"}>\n          {t.value}\n          <button\n            className=\"completed\"\n            onClick={(e) => taskCompleted(e, t.id)}\n          >\n            Completed\n          </button>\n\n          <button className=\"delete\" onClick={(e) => deletetask(e, t.id)}>\n            Delete\n          </button>\n        </li>\n      ))}\n    </ul>\n  ) : null}\n</div>\n);\n}\n\n\n\nexport default TodoApp;"]},"metadata":{},"sourceType":"module"}